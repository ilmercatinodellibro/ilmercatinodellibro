fragment UserSummary on User {
  id
  firstname
  lastname
  email
}

fragment User on User {
  ...UserSummary
  phoneNumber
  discount
  notes
}

fragment UserInfo on User {
  phoneNumber
  email
  firstname
  lastname
}

fragment UpdatableUserInfo on User {
  # If a new field that is updatable through this mutation is added, it should be added here
  ...User
  dateOfBirth
  delegate
  locale
  updatedAt
}

fragment Member on User {
  ...User
  role(retailLocationId: $retailLocationId)
}

fragment Customer on User {
  ...UpdatableUserInfo
  createdAt
  emailVerified
  scheduledForDeletionAt: deletedAt
  booksInStock
  booksSold
  booksReserved
  booksRequested
  booksRequestedAndAvailable: booksRequested(onlyAvailable: true)
  booksBought
  booksInCart(retailLocationId: $retailLocationId)
}

query getMembers($retailLocationId: String!, $filters: MembersQueryFilter) {
  members(retailLocationId: $retailLocationId, filters: $filters) {
    ...Member
  }
}

query getCustomers(
  $page: Int!
  $rowsPerPage: Int!
  $retailLocationId: String!
  $filter: UserQueryFilters
) {
  users(page: $page, rowsPerPage: $rowsPerPage, filter: $filter) {
    page
    rowsCount
    rows {
      ...Customer
      ...Member
    }
  }
}

query getAllCustomers($retailLocationId: String!) {
  allUsers(retailLocationId: $retailLocationId) {
    ...Customer
    ...Member
  }
}

mutation removeMember($input: RemoveMemberPayload!) {
  removeMember(input: $input)
}

mutation updateRole($input: UpdateRolePayload!) {
  updateRole(input: $input)
}

mutation addUser($input: RegisterUserPayload!) {
  createUser(input: $input) {
    ...UserSummary
  }
}

mutation updateUser($input: UpdateUserPayload!) {
  updateUser(input: $input) {
    # Request just enough data so that the cache gets updated automatically
    ...UpdatableUserInfo
  }
}

mutation settleUser($input: SettleUserInput!) {
  settleUser(input: $input)
}

query getUserData($userId: String!) {
  userData(userId: $userId)
}

mutation deleteUserAccount($input: DeleteUserAccountInput!) {
  # Request just enough data so that the cache gets updated automatically
  deleteUserAccount(input: $input) {
    id
    deletedAt
  }
}

mutation cancelUserAccountDeletion($input: CancelUserAccountDeletionInput!) {
  # Request just enough data so that the cache gets updated automatically
  cancelUserAccountDeletion(input: $input) {
    id
    deletedAt
  }
}
