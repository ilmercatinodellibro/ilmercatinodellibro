// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// TODO: automatically transform camelCase column names to snake_case while generating

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native"]
}

generator nestgraphql {
  provider                              = "node node_modules/prisma-nestjs-graphql"
  output                                = "../src/@generated"
  // We need to import directly from 'src/@generated' instead of subfolders to avoid circular dependencies
  // So, we enable this option to make it possible to import everything from the same folder
  // This is why we need the patch applied to PNPM on PrismaNestJSGraphQL
  reExport                              = All
  requireSingleFieldsInWhereUniqueInput = true
  noAtomicOperations                    = true

  // Use JSON scalar from graphql-scalars instead of the default (graphql-type-json)
  graphqlScalars_Json_name      = "GraphQLJSON"
  graphqlScalars_Json_specifier = "graphql-scalars"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  OPERATOR
  ADMIN
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  // Prevents password field to be leaked in the GraphQL API
  /// @HideField()
  password      String
  firstname     String
  lastname      String
  emailVerified Boolean  @default(false)
  role          Role     @default(USER)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  /// @HideField()
  events            Event[]
  notifications     Notification[]
  pushSubscriptions PushSubscription[]
}

model Event {
  id          String @id @default(uuid())
  name        String
  description String

  ownerId String @map("owner_id")
  owner   User   @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  notifications Notification[]
}

model Notification {
  id      String    @id @default(uuid())
  userId  String    @map("user_id")
  user    User      @relation(fields: [userId], references: [id])
  eventId String    @map("event_id")
  event   Event     @relation(fields: [eventId], references: [id])
  readAt  DateTime? @map("read_at") @db.Timestamptz()

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
}

model PushSubscription {
  userId      String @map("user_id")
  user        User   @relation(fields: [userId], references: [id])
  deviceToken String @map("device_token")

  @@unique([userId, deviceToken])
}

// Schools and Books
// model School {
//   code String @id

//   courses StudyCourse[] @relation("SchoolStudyCourses")
// }

// model StudyCourse {
//   id          String @id @default(uuid())
//   sectionName String @map("section_name")
//   year        Int

//   schoolCode String @map("school_code")
//   school     School @relation("SchoolStudyCourses", fields: [schoolCode], references: [code])
// }

model RetailLocation {
  id                    String  @id @default(uuid())
  name                  String
  registrationEnabled   Boolean @default(false) @map("registration_enabled")
  payOffEnabled         Boolean @default(false) @map("pay_off_enabled")
  fullAddress           String  @map("full_address")
  humanReadableId       String  @unique @map("human_readable_id")
  email                 String  @unique
  phoneNumber           String  @default("") @map("phone_number")
  facebookLink          String  @default("") @map("facebook_link")
  instagramLink         String  @default("") @map("instagram_link")
  whoAreWeContent       String  @default("") @map("who_are_we_content")
  joinUsContent         String  @default("") @map("join_us_content")
  buyRate               Float   @default(35) @map("buy_rate")
  sellRate              Float   @default(55) @map("sell_rate")
  maxBookingDays        Int     @default(7) @map("max_booking_days")
  warehouseMaxBlockSize Int     @default(10) @map("warehouse_max_block_size")

  books Book[] @relation("RetailLocationBooks")
}

model Book {
  id               String         @id @default(uuid())
  isbnCode         String         @map("isbn_code")
  subject          String
  authorsFullName  String         @map("authors_full_name")
  title            String
  originalPrice    Float          @map("original_price")
  publisherName    String         @map("publisher_name")
  retailLocationId String         @map("retail_location_id")
  retailLocation   RetailLocation @relation("RetailLocationBooks", fields: [retailLocationId], references: [id])
}
